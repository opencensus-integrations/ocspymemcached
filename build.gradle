description = 'OpenCensus instrumented SpyMemcached wrapper'

apply plugin: 'com.github.sherter.google-java-format'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "net.ltgt.errorprone"
apply plugin: "signing"

group = "io.orijtech.integrations"
version = "0.0.1" // CURRENT_OCSPYMEMCACHED_VERSION

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
}

jar.manifest {
    attributes('Implementation-Title': name,
            'Implementation-Version': version,
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version'),
            'Source-Compatibility': sourceCompatibility,
            'Target-Compatibility': targetCompatibility)
}

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'
        classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.7.1"
    }
}

def errorProneVersion = '2.3.1'
def findBugsJsr305Version = '3.0.2'

dependencies {
    // https://mvnrepository.com/artifact/io.opencensus/opencensus-api
    compile group: 'io.opencensus', name: 'opencensus-api', version: '0.18.0'
    runtime group: 'io.opencensus', name: 'opencensus-impl', version: '0.18.0'

    // https://mvnrepository.com/artifact/net.spy/spymemcached
    compile group: 'net.spy', name: 'spymemcached', version: '2.12.3'

    compileOnly "com.google.code.findbugs:jsr305:${findBugsJsr305Version}"
    compileOnly "com.google.errorprone:error_prone_annotations:${errorProneVersion}"

    testCompile 'junit:junit:4.12'
    testCompile 'com.google.truth:truth:0.30'
    testCompile 'org.mockito:mockito-core:1.9.5'
    // https://mvnrepository.com/artifact/io.opencensus/opencensus-impl
    testCompile group: 'io.opencensus', name: 'opencensus-impl', version: '0.18.0'
}

compileJava {
    // We suppress the "try" warning because it disallows managing an auto-closeable with
    // try-with-resources without referencing the auto-closeable within the try block.
    // We suppress the "processing" warning as suggested in
    // https://groups.google.com/forum/#!topic/bazel-discuss/_R3A9TJSoPM
    it.options.compilerArgs += ["-Xlint:all", "-Xlint:-try", "-Xlint:-processing"]
    it.options.compilerArgs += ["-XepAllDisabledChecksAsWarnings", "-XepDisableWarningsInGeneratedCode"]

    // MutableMethodReturnType can suggest returning Guava types from
    // API methods (https://github.com/google/error-prone/issues/982).
    it.options.compilerArgs += ["-Xep:MutableMethodReturnType:OFF"]

    // ReturnMissingNullable conflicts with Checker Framework null analysis.
    it.options.compilerArgs += ["-Xep:ReturnMissingNullable:OFF"]

    // OpenCensus doesn't currently use Var annotations.
    it.options.compilerArgs += ["-Xep:Var:OFF"]

    it.options.encoding = "UTF-8"
    it.options.compilerArgs += ["-Xlint:-cast"]
    it.options.compilerArgs += ["-Werror"]
}

// Google formatter works only on java8.
if (JavaVersion.current().isJava8Compatible()) {
    googleJavaFormat {
        toolVersion '1.6'
    }

    afterEvaluate {  // Allow subproject to add more source sets.
        tasks.googleJavaFormat {
            source = sourceSets*.allJava
            include '**/*.java'
        }

        tasks.verifyGoogleJavaFormat {
            source = sourceSets*.allJava
            include '**/*.java'
        }
    }
}

compileJava {
    options.compilerArgs += ["-Xlint:none"]
    options.encoding = "UTF-8"
}

signing {
    required false
    sign configurations.archives
}

javadoc.options {
    encoding = 'UTF-8'
    links 'https://docs.oracle.com/javase/8/docs/api/'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                def configureAuth = {
                    if (rootProject.hasProperty('ossrhUsername') && rootProject.hasProperty('ossrhPassword')) {
                        authentication(userName:rootProject.ossrhUsername, password: rootProject.ossrhPassword)
                    }
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/", configureAuth)

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/", configureAuth)

                pom.project {
                    name "opencensus-spymemcached"
                    packaging 'jar'
                    description project.description
                    url 'https://github.com/orijtech/ocspymemcached'

                    scm {
                        connection 'scm:svn:https://github.com/orijtech/ocspymemcached'
                        developerConnection 'scm:git:git@github.com/orijtech/ocspymemcached'
                        url 'https://github.com/orijtech/ocspymemcached'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'io.opencensus'
                            name 'OpenCensus Contributors'
                            email 'census-developers@googlegroups.com'
                            url 'opencensus.io'
                            // https://issues.gradle.org/browse/GRADLE-2719
                            organization = 'OpenCensus Authors'
                            organizationUrl 'https://www.opencensus.io'
                        }
                    }
                }
            }
        }
    }
